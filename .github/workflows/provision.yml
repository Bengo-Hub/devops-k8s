name: Provision Cluster Services

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  provision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      skip_provision: 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          set -e
          VER=$(curl -L -s https://dl.k8s.io/release/stable.txt)
          curl -LO https://dl.k8s.io/release/${VER}/bin/linux/amd64/kubectl
          sudo install -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client=true

      - name: Install Helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Install PostgreSQL client (psql)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client postgresql-client-common

      - name: Configure kubeconfig
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "::group::Checking KUBE_CONFIG"
          if [ -z "$KUBE_CONFIG_B64" ]; then
            echo "❌ KUBE_CONFIG secret not provided."
            echo "Please set KUBE_CONFIG at org/repo level with base64-encoded kubeconfig."
            echo "skip_provision=true" >> $GITHUB_ENV
            echo "::endgroup::"
            exit 0
          fi
          echo "✅ KUBE_CONFIG secret found"
          echo "::endgroup::"
          
          echo "::group::Decoding and configuring kubeconfig"
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG_B64" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "✅ Kubeconfig written to ~/.kube/config"
          echo "::endgroup::"
          
          echo "::group::Testing cluster connectivity"
          if kubectl cluster-info; then
            echo "✅ Successfully connected to Kubernetes cluster"
            kubectl get nodes || true
            echo "skip_provision=false" >> $GITHUB_ENV
          else
            echo "❌ Failed to connect to cluster. Check your KUBE_CONFIG."
            echo "skip_provision=true" >> $GITHUB_ENV
            exit 1
          fi
          echo "::endgroup::"

      - name: Ensure scripts executable
        if: env.skip_provision != 'true'
        run: |
          chmod +x scripts/*.sh || true

      - name: Install storage provisioner (idempotent)
        if: env.skip_provision != 'true'
        run: |
          echo "::group::Installing Storage Provisioner"
          ./scripts/install-storage-provisioner.sh
          echo "::endgroup::"

      - name: Install databases (PostgreSQL & Redis)
        if: env.skip_provision != 'true'
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          PG_DATABASE: ${{ secrets.PG_DATABASE || 'bengo_erp' }}
          DB_NAMESPACE: ${{ secrets.DB_NAMESPACE || 'erp' }}
        run: |
          echo "::group::Installing Databases (PostgreSQL & Redis)"
          export NAMESPACE=${DB_NAMESPACE}
          export PG_DATABASE=${PG_DATABASE}
          ./scripts/install-databases.sh
          echo "::endgroup::"

      - name: Configure ingress controller (idempotent)
        if: env.skip_provision != 'true'
        run: |
          echo "::group::Configuring NGINX Ingress Controller"
          ./scripts/configure-ingress-controller.sh
          echo "::endgroup::"

      - name: Install cert-manager (idempotent)
        if: env.skip_provision != 'true'
        run: |
          echo "::group::Installing cert-manager"
          ./scripts/install-cert-manager.sh
          echo "::endgroup::"

      - name: Install Argo CD (idempotent)
        if: env.skip_provision != 'true'
        env:
          ARGOCD_DOMAIN: argocd.masterspace.co.ke
        run: |
          echo "::group::Installing Argo CD"
          ./scripts/install-argocd.sh
          echo "::endgroup::"

      - name: Bootstrap Argo CD applications (app-of-apps)
        if: env.skip_provision != 'true'
        run: |
          echo "::group::Bootstrapping Argo CD applications"
          # Apply the root Application that manages apps under apps/
          if [ -f apps/root-app.yaml ]; then
            kubectl apply -f apps/root-app.yaml
            echo "✅ root Application applied"
          else
            echo "⚠️ apps/root-app.yaml not found; skipping"
          fi
          echo "::endgroup::"

      - name: Install Monitoring (idempotent)
        if: env.skip_provision != 'true'
        env:
          GRAFANA_DOMAIN: grafana.masterspace.co.ke
        run: |
          echo "::group::Installing Monitoring Stack"
          ./scripts/install-monitoring.sh
          echo "::endgroup::"

      - name: Install Vertical Pod Autoscaler (VPA)
        if: env.skip_provision != 'true'
        run: |
          echo "::group::Installing Vertical Pod Autoscaler"
          ./scripts/install-vpa.sh
          echo "::endgroup::"

      - name: Setup Git Access (SSH Keys & Configuration)
        if: env.skip_provision != 'true'
        env:
          VPS_IP: ${{ secrets.VPS_IP }}
        run: |
          echo "::group::Setting up Git SSH Access"
          
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Generate SSH key pair for git operations (if not exists)
          if [ ! -f ~/.ssh/git_deploy_key ]; then
            echo "🔑 Generating SSH key pair for git operations..."
            ssh-keygen -t ed25519 -C "vps-git-access@bengoerp" -f ~/.ssh/git_deploy_key -N ""
            chmod 600 ~/.ssh/git_deploy_key
            chmod 644 ~/.ssh/git_deploy_key.pub
          else
            echo "✅ SSH key pair already exists"
          fi
          
          # Add GitHub to known hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Create SSH config for reliable git operations (FINAL SOLUTION)
          cat > ~/.ssh/config << 'EOF'
          Host github.com
              HostName github.com
              User git
              IdentityFile ~/.ssh/git_deploy_key
              IdentitiesOnly yes
              StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config
          
          # Display public key for deploy key setup
          echo "🔑 PUBLIC KEY FOR GITHUB DEPLOY KEY:"
          echo "====================================="
          cat ~/.ssh/git_deploy_key.pub
          echo "====================================="
          echo ""
          echo "📋 NEXT STEPS:"
          echo "1. Copy the public key above"
          echo "2. Go to: https://github.com/Bengo-Hub/devops-k8s/settings/keys"
          echo "3. Add deploy key with 'Allow write access' enabled"
          echo "4. Test: git clone git@github.com:Bengo-Hub/devops-k8s.git"
          
          echo "::endgroup::"
      - name: Summary
        if: ${{ env.skip_provision != 'true' }}
        run: |
          echo "::group::Cluster Provisioning Complete"
          echo "✅ Storage provisioner installed"
          echo "✅ Databases installed (PostgreSQL & Redis in erp namespace)"
          echo "✅ NGINX Ingress Controller configured"
          echo "✅ cert-manager installed"
          echo "✅ Argo CD installed (https://argocd.masterspace.co.ke)"
          echo "✅ Monitoring Stack installed (https://grafana.masterspace.co.ke)"
          echo "✅ Vertical Pod Autoscaler (VPA) installed"
          echo "✅ Git SSH access configured"
          echo ""
          echo "Database Credentials:"
          echo "- PostgreSQL: kubectl get secret postgresql -n erp -o jsonpath='{.data.postgres-password}' | base64 -d"
          echo "- Redis: kubectl get secret redis -n erp -o jsonpath='{.data.redis-password}' | base64 -d"
          echo ""
          echo "Next steps:"
          echo "1. Set up GitHub deploy key (see workflow output above)"
          echo "2. Point DNS to your VPS IP (77.237.232.66)"
          echo "3. Configure Argo CD repository access"
          echo "4. Deploy applications via Argo CD (they will auto-connect to databases)"
          echo "5. Verify VPA: kubectl get vpa --all-namespaces"
          echo "::endgroup::"

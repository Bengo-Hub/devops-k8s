#!/bin/bash

# BengoERP Deployment Script Template
# Generated by provision.yml playbook

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
LOG_FILE="/tmp/deployment-$(date +%Y%m%d-%H%M%S).log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

# Help function
show_help() {
    cat << EOF
BengoERP Deployment Script

Usage: $0 [OPTIONS]

Options:
    -h, --help              Show this help message
    -e, --environment ENV   Target environment (dev, staging, prod)
    -a, --app APP          Application to deploy (api, ui, both)
    -t, --tag TAG          Docker image tag to deploy
    -f, --force            Force deployment even if checks fail
    -d, --dry-run          Show what would be deployed without doing it
    -v, --verbose          Enable verbose logging

Examples:
    $0 --environment prod --app both --tag latest
    $0 --environment dev --app api --dry-run
    $0 --force --app ui

EOF
}

# Parse arguments
ENVIRONMENT="dev"
APP="both"
TAG=""
FORCE=false
DRY_RUN=false
VERBOSE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -e|--environment)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -a|--app)
            APP="$2"
            shift 2
            ;;
        -t|--tag)
            TAG="$2"
            shift 2
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        -d|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Main deployment function
main() {
    log_info "Starting BengoERP deployment..."
    log_info "Environment: $ENVIRONMENT"
    log_info "Application: $APP"
    log_info "Tag: ${TAG:-latest}"
    log_info "Force: $FORCE"
    log_info "Dry run: $DRY_RUN"

    # Prerequisites check
    check_prerequisites

    # Deploy applications
    if [[ "$APP" == "both" || "$APP" == "api" ]]; then
        deploy_api
    fi

    if [[ "$APP" == "both" || "$APP" == "ui" ]]; then
        deploy_ui
    fi

    # Post-deployment verification
    verify_deployment

    log_success "Deployment completed successfully!"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."

    # Check required tools
    local tools=("kubectl" "helm" "argocd" "docker" "git")
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log_error "Required tool not found: $tool"
            if [[ "$FORCE" == "false" ]]; then
                exit 1
            fi
        else
            log_success "✓ $tool found"
        fi
    done

    # Check kubectl context
    if kubectl cluster-info &> /dev/null; then
        log_success "✓ Kubernetes cluster accessible"
    else
        log_error "Cannot access Kubernetes cluster"
        if [[ "$FORCE" == "false" ]]; then
            exit 1
        fi
    fi

    # Check ArgoCD access
    if argocd version &> /dev/null; then
        log_success "✓ ArgoCD CLI accessible"
    else
        log_error "ArgoCD CLI not configured"
        if [[ "$FORCE" == "false" ]]; then
            exit 1
        fi
    fi
}

# Deploy API application
deploy_api() {
    log_info "Deploying ERP API..."

    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would deploy ERP API application"
        return
    fi

    # Apply ArgoCD application
    kubectl apply -f "$PROJECT_ROOT/apps/erp-api/app.yaml" -n argocd

    # Wait for sync
    log_info "Waiting for API application sync..."
    kubectl wait --for=condition=available --timeout=300s deployment/erp-api -n erp

    log_success "ERP API deployed successfully"
}

# Deploy UI application
deploy_ui() {
    log_info "Deploying ERP UI..."

    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would deploy ERP UI application"
        return
    fi

    # Apply ArgoCD application
    kubectl apply -f "$PROJECT_ROOT/apps/erp-ui/app.yaml" -n argocd

    # Wait for sync
    log_info "Waiting for UI application sync..."
    kubectl wait --for=condition=available --timeout=300s deployment/erp-ui -n erp

    log_success "ERP UI deployed successfully"
}

# Verify deployment
verify_deployment() {
    log_info "Verifying deployment..."

    # Check application status
    if kubectl get applications.argoproj.io -n argocd | grep -q erp; then
        log_success "✓ ArgoCD applications deployed"
    else
        log_error "ArgoCD applications not found"
    fi

    # Check pod status
    if kubectl get pods -n erp | grep -q Running; then
        log_success "✓ Application pods running"
    else
        log_warning "Some pods may not be running yet"
    fi

    # Check ingress
    if kubectl get ingress -n erp &> /dev/null; then
        log_success "✓ Ingress resources created"
    else
        log_warning "Ingress resources not ready yet"
    fi
}

# Run main function
main "$@"

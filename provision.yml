# Ansible Playbook for Provisioning Kubernetes Deployment Tools
# This playbook installs all required tools for the BengoERP deployment workflow

---
- name: Provision Kubernetes Deployment Tools
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    # Tool versions
    kubectl_version: "v1.28.0"
    helm_version: "v3.15.0"
    argocd_version: "v2.13.0"  # Updated to latest stable version
    trivy_version: "0.45.0"
    yq_version: "v4.35.2"
    vpa_version: "1.2.0"  # Vertical Pod Autoscaler version (latest stable)

    # Package repositories
    docker_repo_key: "https://download.docker.com/linux/ubuntu/gpg"
    docker_repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"

    # Installation paths
    tools_dir: "/opt/deployment-tools"
    bin_dir: "/usr/local/bin"

  tasks:
    # ============================================================================
    # SYSTEM PREREQUISITES
    # ============================================================================

    - name: Update apt package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install basic system dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - wget
          - git
          - unzip
          - jq
          - net-tools
          - dnsutils
          - vim
          - htop
          - tree
          - bash-completion
        state: present

    # ============================================================================
    # DOCKER INSTALLATION
    # ============================================================================

    - name: Create Docker keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      get_url:
        url: "{{ docker_repo_key }}"
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Add Docker repository
      apt_repository:
        repo: "{{ docker_repo }}"
        state: present

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    # ============================================================================
    # KUBERNETES TOOLS INSTALLATION
    # ============================================================================

    - name: Create tools directory
      file:
        path: "{{ tools_dir }}"
        state: directory
        mode: '0755'

    - name: Download kubectl binary
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: "{{ bin_dir }}/kubectl"
        mode: '0755'
      notify: install kubectl bash completion

    - name: Download helm binary
      get_url:
        url: "https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz"
        dest: "/tmp/helm-{{ helm_version }}-linux-amd64.tar.gz"

    - name: Extract helm binary
      unarchive:
        src: "/tmp/helm-{{ helm_version }}-linux-amd64.tar.gz"
        dest: "/tmp"
        remote_src: yes

    - name: Install helm binary
      copy:
        src: "/tmp/linux-amd64/helm"
        dest: "{{ bin_dir }}/helm"
        mode: '0755'
        remote_src: yes
      notify: install helm bash completion

    - name: Download ArgoCD CLI binary
      get_url:
        url: "https://github.com/argoproj/argo-cd/releases/download/{{ argocd_version }}/argocd-linux-amd64"
        dest: "{{ bin_dir }}/argocd"
        mode: '0755'

    - name: Install ArgoCD CLI bash completion
      shell: "{{ bin_dir }}/argocd completion bash > /etc/bash_completion.d/argocd"

    # ============================================================================
    # SECURITY SCANNING TOOLS
    # ============================================================================

    - name: Download Trivy binary
      get_url:
        url: "https://github.com/aquasecurity/trivy/releases/download/{{ trivy_version }}/trivy_{{ trivy_version }}_Linux-64bit.tar.gz"
        dest: "/tmp/trivy_{{ trivy_version }}_Linux-64bit.tar.gz"

    - name: Extract Trivy binary
      unarchive:
        src: "/tmp/trivy_{{ trivy_version }}_Linux-64bit.tar.gz"
        dest: "/tmp"
        remote_src: yes

    - name: Install Trivy binary
      copy:
        src: "/tmp/trivy"
        dest: "{{ bin_dir }}/trivy"
        mode: '0755'
        remote_src: yes

    # ============================================================================
    # YAML PROCESSING TOOLS
    # ============================================================================

    - name: Download yq binary
      get_url:
        url: "https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/yq_linux_amd64"
        dest: "{{ bin_dir }}/yq"
        mode: '0755'

    # ============================================================================
    # VERTICAL POD AUTOSCALER INSTALLATION
    # ============================================================================

    - name: Create VPA manifests directory
      file:
        path: "{{ tools_dir }}/vpa-manifests"
        state: directory
        mode: '0755'

    - name: Check if VPA manifests exist
      stat:
        path: "{{ tools_dir }}/vpa-manifests/vpa-v{{ vpa_version }}.yaml"
      register: vpa_manifest_check

    - name: Download VPA manifests
      get_url:
        url: "https://github.com/kubernetes/autoscaler/releases/download/vertical-pod-autoscaler-{{ vpa_version }}/vpa-v{{ vpa_version }}.yaml"
        dest: "{{ tools_dir }}/vpa-manifests/vpa-v{{ vpa_version }}.yaml"
        mode: '0644'
      when: not vpa_manifest_check.stat.exists

    - name: Install VPA components (when kubectl is configured)
      block:
        - name: Apply VPA manifests to cluster
          command: kubectl apply -f "{{ tools_dir }}/vpa-manifests/vpa-v{{ vpa_version }}.yaml"
          when: lookup('env', 'KUBECONFIG') != '' or lookup('file', '~/.kube/config', errors='ignore') != None
      rescue:
        - name: VPA installation skipped (no kubeconfig)
          debug:
            msg: "VPA manifests downloaded but not applied. Apply manually with: kubectl apply -f {{ tools_dir }}/vpa-manifests/vpa-v{{ vpa_version }}.yaml"

    # ============================================================================
    # KUBERNETES DEPLOYMENT TOOLS
    # ============================================================================

    - name: Install kubeconform for YAML validation
      get_url:
        url: "https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz"
        dest: "/tmp/kubeconform-linux-amd64.tar.gz"

    - name: Extract kubeconform
      unarchive:
        src: "/tmp/kubeconform-linux-amd64.tar.gz"
        dest: "/tmp"
        remote_src: yes

    - name: Install kubeconform
      copy:
        src: "/tmp/kubeconform"
        dest: "{{ bin_dir }}/kubeconform"
        mode: '0755'
        remote_src: yes

    # ============================================================================
    # DEVELOPMENT AND DEBUGGING TOOLS
    # ============================================================================

    - name: Install k9s (Kubernetes CLI)
      block:
        - name: Download k9s binary
          get_url:
            url: "https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_amd64.tar.gz"
            dest: "/tmp/k9s_Linux_amd64.tar.gz"

        - name: Extract k9s
          unarchive:
            src: "/tmp/k9s_Linux_amd64.tar.gz"
            dest: "/tmp"
            remote_src: yes

        - name: Install k9s
          copy:
            src: "/tmp/k9s"
            dest: "{{ bin_dir }}/k9s"
            mode: '0755'
            remote_src: yes

    - name: Install stern for multi-pod logging
      get_url:
        url: "https://github.com/stern/stern/releases/latest/download/stern_linux_amd64"
        dest: "{{ bin_dir }}/stern"
        mode: '0755'

    # ============================================================================
    # CONFIGURATION AND SETUP
    # ============================================================================

    - name: Create deployment tools configuration directory
      file:
        path: "{{ tools_dir }}/config"
        state: directory
        mode: '0755'

    - name: Configure kubectl for bash completion
      shell: kubectl completion bash > /etc/bash_completion.d/kubectl

    - name: Configure helm for bash completion
      shell: helm completion bash > /etc/bash_completion.d/helm

    - name: Create deployment scripts directory
      file:
        path: "{{ tools_dir }}/scripts"
        state: directory
        mode: '0755'

    - name: Create deployment configuration template
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - src: "templates/kubeconfig.j2"
          dest: "{{ tools_dir }}/config/kubeconfig-template"
        - src: "templates/deployment-script.j2"
          dest: "{{ tools_dir }}/scripts/deploy.sh"

    # ============================================================================
    # PERMISSIONS AND CLEANUP
    # ============================================================================

    - name: Set proper permissions for all tools
      file:
        path: "{{ bin_dir }}/{{ item }}"
        mode: '0755'
      with_items:
        - kubectl
        - helm
        - argocd
        - trivy
        - yq
        - kubeconform
        - k9s
        - stern

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/tmp/helm-{{ helm_version }}-linux-amd64.tar.gz"
        - "/tmp/trivy_{{ trivy_version }}_Linux-64bit.tar.gz"
        - "/tmp/kubeconform-linux-amd64.tar.gz"
        - "/tmp/k9s_Linux_amd64.tar.gz"

    # ============================================================================
    # VERIFICATION
    # ============================================================================

    - name: Verify all tools are installed and working
      command: "{{ item.command }}"
      register: tool_check
      failed_when: false
      changed_when: false
      with_items:
        - { name: "kubectl", command: "kubectl version --client" }
        - { name: "helm", command: "helm version" }
        - { name: "argocd", command: "argocd version" }
        - { name: "docker", command: "docker --version" }
        - { name: "trivy", command: "trivy --version" }
        - { name: "yq", command: "yq --version" }

    - name: Display installation results
      debug:
        msg: |
          =============================================
          PROVISIONING COMPLETE
          =============================================

          Installed Tools:
          {% for tool in tool_check.results %}
          {% if tool.rc == 0 %}
          ✅ {{ tool.item.name }}: {{ tool.stdout_lines[0] }}
          {% else %}
          ❌ {{ tool.item.name }}: Installation failed
          {% endif %}
          {% endfor %}

          Next Steps:
          1. Configure kubectl: cp {{ tools_dir }}/config/kubeconfig-template ~/.kube/config
          2. Test deployment: {{ tools_dir }}/scripts/deploy.sh --help
          3. Access ArgoCD: argocd login <argocd-server>
          =============================================

  handlers:
    - name: install kubectl bash completion
      shell: kubectl completion bash > /etc/bash_completion.d/kubectl

    - name: install helm bash completion
      shell: helm completion bash > /etc/bash_completion.d/helm
